'' =================================================================================================
''
''   File....... jm_ds3231_demo.spin2
''   Purpose....
''   Author..... Jon "JonnyMac" McPhalen
''               Copyright (c) 2020-2021 Jon McPhalen
''               -- see below for terms of use
''   E-mail..... jon.mcphalen@gmail.com
''   Started....
''   Updated.... 23 JAN 2021
''
''   {$P2}
''
'' =================================================================================================


'' NOTE - Due to I think noisy and long i2c condition and low power pullup i2c is slower
'' * added extra wait in start condition to spi
'' * Using 50Khz
'' TODO: Investigate further

con { terminal }

  BR_TERM  = 230_400                                            ' terminal baud rate

  #0, T_PST, T_ANSI                                             ' terminal types

  T_TYPE = T_PST


con { fixed io pins }

  RX1     = 63  { I }                                           ' programming / debug
  TX1     = 62  { O }

  SF_CS   = 61  { O }                                           ' serial flash
  SF_SCK  = 60  { O }
  SF_SDO  = 59  { O }
  SF_SDI  = 58  { I }

  SD_SCK  = 61  { O }                                           ' sd card
  SD_CS   = 60  { O }
  SD_SDI  = 59  { O }
  SD_SDO  = 58  { I }

  LED2    = 57  { O }                                           ' Eval and Edge LEDs
  LED1    = 56  { O }


con { app io pins }

  SDA     =  29  { IO }                                          ' I2C bus
  SCL     =  28  { O }


con

  #true,  ON, OFF
  #false, NO, YES

  ESC_KEY = 27


obj

' main                                                          ' * master Spin cog
  rtc  : "../Library/jm_ds3231"                                            '   DS3231 rtc
  term : "../Library/jm_fullduplexserial"                                  ' * serial IO for terminal
  ansi : "../Library/jm_ansi"                                              '   ANSI terminal control sequences

' * uses cog when loaded


var

  byte  sc, mn, hr                                              ' time
  byte  wd, dt, mo, yr                                          ' day and date
  byte  t1, t2, t3

  long  tc                                                      ' temperature in Celsius



pub main() | lastsc, lastwd

  setup()

 
  wait_for_terminal(true)

  initialize_rtc()
 
  lastsc := lastwd := -1

  repeat
    waitms(200)
    rtc.rd_time(@sc)                                            ' check time
    if (sc <> lastsc)                                           ' new seconds?
      if T_TYPE == T_PST                                        ' home terminal window
        term.tx(term.HOME)
      else
        term.str(ansi.home())
 
      rtc.rd_calendar(@wd)                                      ' check date
      if ( wd <> lastwd)                                         ' new day?
        term.fstr1(string("\r\n%s\r\n"), rtc.day_long(wd))
        term.fstr3(string("%s %x, 20%.2x \r\n"), rtc.month_long(mo), dt, yr)
        lastwd := wd

      'term.fstr1(string("%.2f\176C \r"),   rtc.temp_c())        ' display temperature
      'term.fstr1(string("%.2f\176F \r\r"), rtc.temp_f())        ' display temperature
      term.fstr1(string("%s\r"), rtc.time_ampm(@sc))            ' display new time
      lastsc := sc

      
    if (term.rxcheck() == ESC_KEY)                              ' Esc key pressed?
      lastsc := lastwd := -1                                    ' refresh screen
      clear_screen()

  repeat
    waitct(0)


pub initialize_rtc()

'' Manually set RTC registers to current time and date
 
  rtc.set_time($50, $5A, $23 )                                   ' 3:04:30 pm
  rtc.set_calendar($07, $23, $01, $21)                          ' Saturday, 23 JAN 2021
 
 
pub setup()

  rtc.start(SCL, SDA, 100,  rtc.PU_NONE)                         ' connect to rtc


  term.tstart(BR_TERM)                                          ' start terminal io


pub wait_for_terminal(clear)

'' Wait for terminal to be open and key pressed

  term.rxflush()
  term.rx()
  if (clear)
    clear_screen()



pub clear_screen()

  if (T_TYPE == T_PST)
    term.tx(term.CLS)
  else
    term.str(ansi.hide_cursor())
    term.str(ansi.home())
    term.str(ansi.cls())


con { license }

{{

  Terms of Use: MIT License

  Permission is hereby granted, free of charge, to any person obtaining a copy of this
  software and associated documentation files (the "Software"), to deal in the Software
  without restriction, including without limitation the rights to use, copy, modify,
  merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
  permit persons to whom the Software is furnished to do so, subject to the following
  conditions:

  The above copyright notice and this permission notice shall be included in all copies
  or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
  INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
  PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
  HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
  CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
  OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

}}